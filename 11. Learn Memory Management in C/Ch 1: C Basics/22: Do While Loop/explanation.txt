do {
    // Loop Body
} while (condition);

it checks after the first execution


Parts of a do while Loop

    Loop Body
        The block of code that is executed before checking the condition, and then repeatedly as long as the condition is true.
    Condition:
        Checked after each iteration.
        If true, execute the body again.
        If false, terminate the loop


#define munit_assert_type_full(T, fmt, a, op, b, msg)                          \
  do {                                                                         \
    T munit_tmp_a_ = (a);                                                      \
    T munit_tmp_b_ = (b);                                                      \
    if (!(munit_tmp_a_ op munit_tmp_b_)) {                                     \
      munit_errorf("assertion failed: %s %s %s (" prefix "%" fmt suffix        \
                   " %s " "%" fmt "): %s",                                     \
                   #a, #op, #b, munit_tmp_a_, #op, munit_tmp_b_, msg);         \
    }                                                                          \
  } while (0)

  because of the lack of ; we get to use this macro inside our code without sintax errors
