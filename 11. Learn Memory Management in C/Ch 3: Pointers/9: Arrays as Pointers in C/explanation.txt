C has pointer arithmetic
in C the array name is actually a pointer to the first element of the array 
so *array_name = first element of the array

we can also use pointer arithmetic

array[4] == *(array + 4)


int numbers[5] = {1, 2, 3, 4, 5};
int *numbers_ptr = numbers;
// Access the third element (index 2)
int value = numbers[2];
int value = *(numbers + 2);

int *p = numbers + 2;  // p points to the third element
int value = *p;        // value is 3

the result is the address of the data plus the offset * the size of the data type

Address 	Element 	Value
0x1000 	numbers[0] 	1
0x1004 	numbers[1] 	2
0x1008 	numbers[2] 	3
0x100C 	numbers[3] 	4
0x1010 	numbers[4] 	5


    numbers + 0 or &numbers[0] points to 0x1000
    numbers + 1 or &numbers[1] points to 0x1004
    numbers + 2 or &numbers[2] points to 0x1008
    numbers + 3 or &numbers[3] points to 0x100C
    numbers + 4 or &numbers[4] points to 0x1010


#include <stdio.h>

int main() {
  int numbers[5] = {1, 2, 3, 4, 5};

  // Accessing elements using array indexing
  printf("numbers[2] = %d\n", numbers[2]);  // Output: 3

  // Accessing elements using pointers
  printf("*(numbers + 2) = %d\n", *(numbers + 2));  // Output: 3

  // Pointer arithmetic
  int *ptr = numbers;
  printf("Pointer ptr points to numbers[0]: %d\n", *ptr);  // Output: 1
  ptr += 2;
  printf("Pointer ptr points to numbers[2]: %d\n", *ptr);  // Output: 3

  return 0;
}
