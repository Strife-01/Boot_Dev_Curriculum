char *msg = "ssh terminal.shop for the best coffee";

array of characters terminated by '\0'
C strings are pointers to the first character in the array 
the \0 is authomatically added at the end of the characters


unlike other languages, C strings do not store their lengths

we determine the length by the position of the '\0' character

for (int i = 0; string[i] != '\0' || a safe gurad for not going out of bounds; i++) {

  }

  the problem with not having the length is that we need to be extra careful of not going out of bounds or having off by one errors


// if we store an array of chars it will keep its size so we can use sizeof operator otherwise, if it decayes to a pointer it will only hold the size of the data which is char so 1 byte
char str1[] = "Hi"; - here we let the compiler allocate as much size as we need
char *str2 = "Snek";
printf("%s %s\n", str1, str2);
// Output: Hi Snek


// notice we aren't using all 50 characters
char first[50] = "Snek";
char *second = "lang!";
strcat(first, second); - we need to make sure not to buffer overflow
printf("Hello, %s\n", first);
// Output: Hello, Sneklang!


'S' 	'n' 	'e' 	'k' 	'\0' 	???? 	... 	????
0x3000 	0x3001 	0x3002 	0x3003 	0x3004 	0x3005 	... 	0x3050

NOTE! There is a bunch of garbage memory after the end of the string.

Here's what second might look like in memory:
'l' 	'a' 	'n' 	'g' 	'!' 	'\0'
0x4000 	0x4001 	0x4002 	0x4003 	0x4004 	0x4005

And first after strcat:
'S' 	'n' 	'e' 	'k' 	'l' 	'a' 	'n' 	'g' 	'!' 	'\0' 	???? 	... 	????
0x3000 	0x3001 	0x3002 	0x3003 	0x3004 	0x3005 	0x3006 	0x3007 	0x3008 	0x3009 	0x300A 	... 	0x3050

strcat doesn't know the length of the first string but it knows where it ends.
