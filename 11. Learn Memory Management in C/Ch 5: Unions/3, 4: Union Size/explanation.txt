typedef union IntOrErrMessage {
  int data;
  char err[256];
} int_or_err_message_t;


the downside is that this will take 256 bytes for every declard type even if we only need the int 
Imagine an array of 1000 int_or_err_message_t objects. Even if none of them make use of the .err field, the array will take up 256 * 1000 = 256,000 bytes of memory! An array of ints would have only taken 4,000 bytes (assuming 32-bit integers).


union SensorData {
  long int temperature;
  long int humidity;
  long int pressure;
};

union PacketPayload {
  char text[256];
  unsigned char binary[256];
  struct ImageData {
    int width;
    int height;
    unsigned char data[1024];
  } image;
};


union Item {
  struct {
    int damage;
    int range;
    int size;
  } weapon;
  struct {
    int healingAmount;
    int duration;
  } potion;
  struct {
    int doorID;
  } key;
};


PacketPayload -> Item -> SensorData
