Unions in C are a less restrictive sum types from functional programming.

They can hold one type out of multiple specified types but not all at the same time 

typedef union AgeOrName {
  int age;
  char *name;
} age_or_name_t;

The compiler will allocate enough memory to accomodate the largest one of the types

typedef union Data {
  char c;
  int i;
} data_t

    data.c = 'A'; // Store a char value in the union
    the size allocated by the compiler is still 4 bytes as it accomodates the largest data type


age_or_name_t lane = { .age = 29 };
printf("age: %d\n", lane.age);
// age: 29


printf("name: %s\n", lane.name);
// name:

we get an undefined behaviour

0000 0000 0000 0000 0000 0000 0001 1101


Then if we try to access .name, we read from the same block of memory but try to interpret the bytes as a char *, which is why we get garbage (which is interpreted as nothing in this case). Put simply, setting the value of .age overwrites the value of .name and vice versa, and you should only access the field that you set

we have one memory space and we interpret it with the specified data type 

we can overwrites
