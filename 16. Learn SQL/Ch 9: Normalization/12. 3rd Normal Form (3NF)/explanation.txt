3rd Normal Form (3NF)

A table in 3rd normal form follows all the rules of 2nd normal form, and one additional rule:

    All columns that aren't part of the primary key are dependent solely on the primary key.

Notice that this is only slightly different from second normal form. In second normal form we can't have a column completely dependent on only part of the primary key, and in third normal form we can't have a column that is entirely dependent on anything that isn't the primary key.
Example of 2nd NF, but Not 3rd NF

In this table, the primary key is simply the id column.
id 	name 	first_initial 	email
1 	Lane 	l 	lane.works@example.com
2 	Breanna 	b 	breanna@example.com
3 	Lane 	l 	lane.right@example.com

This table is in 2nd normal form because first_initial is not dependent on a part of the primary key. However, because it is dependent on the name column, it doesn't adhere to 3rd normal form.
Example of 3rd Normal Form

The way to convert the table above to 3NF is to add a new table that maps a name directly to its first_initial. Notice how similar this solution is to 2NF.
id 	name 	email
1 	Lane 	lane.works@example.com
2 	Breanna 	breanna@example.com
3 	Lane 	lane.right@example.com
name 	first_initial
Lane 	l
Breanna 	b
3NF Is Usually a Good Idea

The same exact rule of thumb applies to the second and third normal forms.

Optimize for data integrity and data de-duplication first by adhering to 3NF. If you have speed issues, de-normalize accordingly.

