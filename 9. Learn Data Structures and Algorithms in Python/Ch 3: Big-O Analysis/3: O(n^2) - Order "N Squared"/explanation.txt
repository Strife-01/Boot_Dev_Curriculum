O(n^2) grows in complexity much more rapidly. That said, for small and medium input sizes, these algorithms can still be very useful.

A common reason an algorithm falls into O(n^2) is by using a nested loop, where the number of iterations of each loop is equal to the number of items in the input:

for person_one in persons:
    for person_two in persons:
        # every combination of people
        # will go on a date... twice!
        go_on_date(person_one, person_two)

If does_name_exist(10 names, 10 names) takes just 1 second to complete, then we can estimate:

    does_name_exist(100 names, 100 names) = 100 seconds
    does_name_exist(1000 names, 1000 names) = 10,000 seconds
    does_name_exist(10000 names, 10000 names) = 1,000,000 seconds

