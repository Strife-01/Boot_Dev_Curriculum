Debugging a Server

Debugging a CLI app is simple:

    Write some code.
    Build and run the code.
    See if it did what you expected.
    If it didn't, add some logging or fix the code, and go back to step 2.

Debugging a server is a little different. The simplest way (minimal tooling) is to:

    Write some code.
    Build and run the code.
    Send a request to the server using a browser or some other HTTP client.
    See if it did what you expected.
    If it didn't, add some logging or fix the code, and go back to step 2.

Make sure you're testing your server by hitting endpoints in the browser before submitting your answers.



Restarting a Server

I usually use a single command to build and run my servers, assuming I'm in my main package directory:

go run .

This builds the server and runs it in one command.

To stop the server, I use ctrl+c. This sends a signal to the server, telling it to stop. The server then exits.

To start it again, I just run the same command.

Alternatively, you can compile a binary and run it instead

go build -o out && ./out

CLI Tip

If you didn't know, you can continuously press the up arrow key on the command line to see the commands you've previously run. That way you don't need to re-type commands that you use often!

Ask Melkey to realease a new version of go-blueprint
If the go build -o out succeeds with exit code 0, it runs the ./out command 
