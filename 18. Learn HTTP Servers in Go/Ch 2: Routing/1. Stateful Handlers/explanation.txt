It's frequently useful to have a way to store and access state in our handlers. For example, we might want to keep track of the number of requests we've received, or we may want to pass around an open connection to a database, or credentials to an API.


Steps

    Create a struct in main.go that will hold any stateful, in-memory data we'll need to keep track of. In our case, we just need to keep track of the number of requests we've received.

type apiConfig struct {
	fileserverHits atomic.Int32
}

The atomic.Int32 type is a really cool standard-library type that allows us to safely increment and read an integer value across multiple goroutines (HTTP requests).

    Next, write a new middleware method on a *apiConfig that increments the fileserverHits counter every time it's called. Here's the method signature I used:

func (cfg *apiConfig) middlewareMetricsInc(next http.Handler) http.Handler {
	// ...
}

The atomic.Int32 type has an .Add() method, use it to safely increment the number of fileserverHits.

    Wrap the http.FileServer handler with the middleware method we just wrote. For example:

mux.Handle("/app/", apiCfg.middlewareMetricsInc(handler))

    Create a new handler that writes the number of requests that have been counted as plain text in this format to the HTTP response:

Hits: x

Where x is the number of requests that have been processed. This handler should be a method on the *apiConfig struct so that it can access the fileserverHits data.

    Register that handler with the serve mux on the /metrics path.
    Finally, create and register a handler on the /reset path that, when hit, will reset your fileserverHits back to 0.

It should follow the same design as the previous handlers.

Remember, similar to the metrics endpoint, /reset will need to be a method on the *apiConfig struct so that it can also access the fileserverHits
