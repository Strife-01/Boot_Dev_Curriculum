Abstraction helps us handle complexity by hiding unnecessary details. Sounds like encapsulation, right? They're so similar that it's almost not worth worrying about the difference...almost.
Abstraction vs encapsulation

    Abstraction is about creating a simple interface for complex behavior. It focuses on what's exposed.
    Encapsulation is about hiding internal state. It focuses on tucking implementation details away so no one depends on them.

Abstraction is more about reducing complexity, encapsulation is more about maintaining the integrity of system internals.
Are we encapsulating or abstracting?

Both. Almost always we are doing both. Here's an example of using the random library to generate a random number:

import random

attack_damage = random.randrange(5)

Generating random numbers is a really hard problem. The operating system uses the physical hardware of the computer to create a seed for the randomness. However, the developers of the random library have abstracted that complexity away and encapsulated it within the simple randrange function. We just say "I want a random number from 0 to 4" and the library does it.

When writing libraries for use by other developers, getting the abstractions right is crucial because changing them later can be disastrous. Imagine if the maintainers of the random module changed the input parameters to the randrange function! It would break code all over the world.
