Inheritance is mainly for OOP languages like Python, Ruby, Java, C++, C#, etc.
Abstraction and encapsulation can be found in other languages like C, Go, Rust, etc.

It allows us to DRY because we can inherit properties and behaviour from the parent classes.

class Animal:
    # parent "Animal" class

class Cow(Animal):
    # child class "Cow" inherits "Animal"


class Animal:
    def __init__(self, num_legs):
        self.num_legs = num_legs

class Cow(Animal):
    def __init__(self, num_udders):
        # call the parent constructor to give the cow some legs
        super().__init__(4)

        # set cow specific properties
        self.num_udders = num_udders

super represents the super class - the parent of the class
super() is the constructor of the super class, but syntax differ from language to language.

here we call the super class to give the values to this class
