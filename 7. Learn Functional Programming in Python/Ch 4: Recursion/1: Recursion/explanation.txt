Recursion is the process of defining something in terms of itself.
A recursive function is a function that calls itself.

isinstance(v, type) - returns a bolean of whether or not the value is an instance of type

def dict_depth(d, max_depth_so_far):
    if not isinstance(d, dict) or not d:
        return max_depth_so_far
    current_max = max_depth_so_far
    for v in d.values():
        depth_subdict = dict_depth(v, max_depth_so_far + 1)
        if depth_subdict > curr_depth:
            curr_depth = depth_subdict
    return curr_depth


nums with smaller and smaller lists.
3. The base case

So what happens when we get to the "end"? sum_nums(nums[1:]) is called, but nums[1:] is an empty list because we ran out of numbers. We need to write a base case to stop the madness.

if len(nums) == 0:
    return 0

The "base case" of a recursive function is the part of the function that does not call itself. Example of recursion

If you thought loops were the only way to iterate over a list, you were wrong! Recursion is fundamental to functional programming because it's how we iterate over lists while avoiding stateful loops. Take a look at this function that sums the numbers in a list:

def sum_nums(nums):
    if len(nums) == 0:
        return 0
    return nums[0] + sum_nums(nums[1:])

print(sum_nums([1, 2, 3, 4, 5]))
# 15

Don't break your brain on the example above! Let's break it down step by step:
1. Solve a small problem

Our goal is to sum all the numbers in a list, but we're not allowed to loop. So, we start by solving the smallest possible problem: summing the first number in the list with the rest of the list:

return nums[0] + sum_nums(nums[1:])

2. Recurse

So, what actually happens when we call sum_nums(nums[1:])? Well, we're just calling sum_nums with a smaller list! In the first call, the nums input was [1, 2, 3, 4, 5], but in the next call it's just [2, 3, 4, 5]. We just keep calling sum_
