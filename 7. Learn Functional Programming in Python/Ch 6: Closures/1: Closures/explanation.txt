A closure is a function that keeps track of its lexical environment and the state of the scope in which it has been created
in some languages if those variables are not utilized inside the function they will be deallocated but that is more of a performance improvement

Put simply, a closure is just a function that keeps track of some values from the place where it was defined, no matter where it is executed later on.


The concatter() function returns a function called doc_builder (yay higher-order functions!) that has a reference to an enclosed doc value.

def concatter():
	doc = ""
	def doc_builder(word):
		# "nonlocal" tells Python to use the 'doc'
		# variable from the enclosing scope
		nonlocal doc
		doc += word + " "
		return doc
	return doc_builder

# save the returned 'doc_builder' function
# to the new function 'harry_potter_aggregator'
harry_potter_aggregator = concatter()
harry_potter_aggregator("Mr.")
harry_potter_aggregator("and")
harry_potter_aggregator("Mrs.")
harry_potter_aggregator("Dursley")
harry_potter_aggregator("of")
harry_potter_aggregator("number")
harry_potter_aggregator("four,")
harry_potter_aggregator("Privet")

print(harry_potter_aggregator("Drive"))
# Mr. and Mrs. Dursley of number four, Privet Drive

When concatter() is called, it creates a new "stateful" function that remembers the value of its internal doc variable. Each successive call to harry_potter_aggregator appends to that same doc.


in python we have the nonlocal keyword which is required to access the data from the functions lexical environment

