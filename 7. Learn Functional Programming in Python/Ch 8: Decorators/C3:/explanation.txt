from functools import lru_cache

memoization decorator

from functools import lru_cache

@lru_cache()
def factorial_r(x):
    if x == 0:
        return 1
    else:
        return x * factorial_r(x - 1)

factorial_r(10) # no previously cached result, makes 11 recursive calls
# 3628800
factorial_r(5)  # just looks up cached value result
# 120
factorial_r(12) # makes two new recursive calls, the other 11 are cached
# 479001600



def lru_cache(f):
    cache = {}
    def wrapper(x):
        if x not in cache:
            cache[x] = f(x)
        return cache[x]
    return wrapper


from collections import OrderedDict

def lru_cache(maxsize=128):
    def decorator(f):
        cache = OrderedDict()
        def wrapper(*args):
            if args in cache:
                cache.move_to_end(args)  # Mark as recently used
            else:
                if len(cache) >= maxsize:
                    cache.popitem(last=False)  # Remove least recently used
                cache[args] = f(*args)
            return cache[args]
        return wrapper
    return decorator

Least Recently Used (LRU)


lru_cache memoizes the inputs and outputs of the decorated function in a size-restricted dictionary. It speeds up repeated calls to a slow function with the same inputs. For instance, if the function reads from disc, makes network requests, or requires a lot of computation AND it is used repeatedly with the same inputs.
