if we create arrays of structs we can access and mannipulate it with pointer arithmetic and indexing.

typedef struct Coordinate {
  int x;
  int y;
  int z;
} coordinate_t;

coordinate_t points[3] = {
  {1, 2, 3}, // 
  {4, 5, 6},
  {7, 8, 9}
};

printf("points[1].x = %d, points[1].y = %d, points[1].z = %d\n",
  points[1].x, points[1].y, points[1].z
);
// 4, 5, 6


use pointer arithmetic

coordinate_t *ptr = points;
printf("ptr[1].x = %d, ptr[1].y = %d, ptr[1].z = %d\n",
  (ptr + 1)->x, (ptr + 1)->y, (ptr + 1)->z
);
// 4, 5, 6


Address 	Element 	Value 	Offset (bytes)
0x2000 	points[0].x 	1 	0
0x2004 	points[0].y 	2 	4
0x2008 	points[0].z 	3 	8
0x200C 	points[1].x 	4 	12
0x2010 	points[1].y 	5 	16
0x2014 	points[1].z 	6 	20
0x2018 	points[2].x 	7 	24
0x201C 	points[2].y 	8 	28
0x2020 	points[2].z 	9 	32
Accessing Elements Using Pointers

    points + 0 or &points[0] points to 0x2000
    points + 1 or &points[1] points to 0x200C (next structure, offset by 12 bytes)
    points + 2 or &points[2] points to 0x2018


the padding needs to be taken in consideration 

we go to the address of the start + number * bytes in the struct or data type


struct with 8 ints = 8 * 4 = 32 bytes of data
an array with structs will have 8*4*array_length

start will have 32 bytes and start at 0

5th element will start at 129 bytes
4 elements take 128 bytes 

5th element C will be at byte 128 + 4*2 = 136 - here will start cause we read bytes from 0 so this is the 137th byte which is byte with number 136 offset from the start
